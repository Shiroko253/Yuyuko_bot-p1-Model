import discord
from discord.ext import commands
from discord.ui import View, Button
import math
import logging

SHOP_COLOR = discord.Color.from_rgb(255, 182, 193)  # Ê´ªËä±Á≤â/ÂπΩÂπΩÂ≠êË≤™ÂêÉËâ≤
ITEMS_PER_PAGE = 5  # ÊØèÈ†ÅÈ°ØÁ§∫ÂïÜÂìÅÊï∏Èáè

def calc_total_price(price, tax_percent):
    return round(price + price * (tax_percent / 100), 2)

class Shop(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @discord.slash_command(
        name="shop",
        description="ÂπΩÂπΩÂ≠êÁöÑË≤™ÂêÉÂÜ•ÁïåÂïÜÂ∫óÔºàÂàÜÈ†ÅÁÄèË¶ΩÔºâ"
    )
    async def shop(self, ctx: discord.ApplicationContext):
        # ËÆÄÂèñÂïÜÂìÅÂàóË°®
        shop_items = self.bot.data_manager._load_json("config/config.json").get("shop_item", [])
        total_pages = max(1, math.ceil(len(shop_items) / ITEMS_PER_PAGE))
        current_page = 1

        def get_embed(page):
            embed = discord.Embed(
                title="üç° ÂπΩÂπΩÂ≠êÁöÑË≤™ÂêÉÂÜ•ÁïåÂïÜÂ∫ó üç°",
                description="ÂÜ•Áïå‰∏ª‰∫∫ÂπΩÂπΩÂ≠êÁÇ∫‰Ω†Âëà‰∏ä‰ªäÊó•ÁæéÂë≥‰æõÂìÅÔΩû\nÂø´‰æÜÈÅ∏Ë≥ºËÆìÈùàÈ≠ÇÊÑâÊÇÖÁöÑÁæéÈ£üÂêßÔºÅ",
                color=SHOP_COLOR
            )
            start = (page - 1) * ITEMS_PER_PAGE
            end = start + ITEMS_PER_PAGE
            for i, item in enumerate(shop_items[start:end], start=1):
                price = item["price"]
                tax = item["tax"]
                total = calc_total_price(price, tax)
                embed.add_field(
                    name=f"{item['name']} üçΩÔ∏è",
                    value=(
                        f"ÂÉπÊ†ºÔºö{price}ÂπΩÈùàÂπ£\n"
                        f"Á®ÖÊî∂Ôºö{tax}%\n"
                        f"ÂêàË®àÔºö{total}ÂπΩÈùàÂπ£\n"
                        f"Ê∂àÈô§Â£ìÂäõÔºö{item['MP']}\n"
                        f"ÈÅ∏Ë≥ºÁ∑®ËôüÔºö`{start + i}`"
                    ),
                    inline=False
                )
            embed.set_footer(text=f"Á¨¨ {page} / {total_pages} È†ÅÔΩúÂπΩÂπΩÂ≠êÔºöÂêÉÈ£ΩÈ£ΩÊâçÊúâÂäõÊ∞£Ë≥ûËä±Âë¢ÔΩû")
            return embed

        # ÂàÜÈ†ÅÊéßÂà∂ UI
        class ShopPages(View):
            def __init__(self, page):
                super().__init__(timeout=120)
                self.page = page
                self.update_buttons()

            def update_buttons(self):
                self.clear_items()
                if self.page > 1:
                    self.add_item(Button(label="‰∏ä‰∏ÄÈ†Å", style=discord.ButtonStyle.secondary, emoji="‚¨ÖÔ∏è", custom_id="prev"))
                if self.page < total_pages:
                    self.add_item(Button(label="‰∏ã‰∏ÄÈ†Å", style=discord.ButtonStyle.secondary, emoji="‚û°Ô∏è", custom_id="next"))
                self.add_item(Button(label="ÈÅ∏Ë≥º", style=discord.ButtonStyle.success, emoji="üõí", custom_id="buy"))

            async def interaction_check(self, interaction: discord.Interaction):
                return interaction.user == ctx.author

            @discord.ui.button(label="‰∏ä‰∏ÄÈ†Å", style=discord.ButtonStyle.secondary, emoji="‚¨ÖÔ∏è", custom_id="prev", row=0)
            async def prev(self, button, interaction):
                if self.page > 1:
                    self.page -= 1
                    self.update_buttons()
                    await interaction.response.edit_message(embed=get_embed(self.page), view=self)

            @discord.ui.button(label="‰∏ã‰∏ÄÈ†Å", style=discord.ButtonStyle.secondary, emoji="‚û°Ô∏è", custom_id="next", row=0)
            async def next(self, button, interaction):
                if self.page < total_pages:
                    self.page += 1
                    self.update_buttons()
                    await interaction.response.edit_message(embed=get_embed(self.page), view=self)

            @discord.ui.button(label="ÈÅ∏Ë≥º", style=discord.ButtonStyle.success, emoji="üõí", custom_id="buy", row=0)
            async def buy(self, button, interaction):
                await interaction.response.send_message(
                    "Ë´ãËº∏ÂÖ•‰Ω†ÊÉ≥Ë≥ºË≤∑ÁöÑÂïÜÂìÅÁ∑®ËôüÔºàÊñº60ÁßíÂÖßÂõûË¶ÜÔºâ",
                    ephemeral=True
                )
                def check(m):
                    return m.author == ctx.author and m.channel == ctx.channel

                try:
                    msg = await self.bot.wait_for("message", timeout=60.0, check=check)
                    idx = int(msg.content) - 1
                    if 0 <= idx < len(shop_items):
                        item = shop_items[idx]
                        await show_confirm(interaction, item)
                    else:
                        await ctx.send("ÂπΩÂπΩÂ≠êÔºöÈÄôÂÄãÁ∑®ËôüÊ≤íÊúâ‰æõÂìÅÂñîÔΩû", ephemeral=True)
                except Exception as e:
                    await ctx.send("ÂπΩÂπΩÂ≠êÔºö‰Ω†ÊÉ≥Â§™‰πÖÂï¶Ôºå‰æõÂìÅÈ£õËµ∞‰∫ÜÔºÅ", ephemeral=True)

        # Ë≥ºË≤∑Á¢∫Ë™çÈ†ÅÈù¢
        async def show_confirm(interaction, item):
            price = item["price"]
            tax = item["tax"]
            total = calc_total_price(price, tax)
            embed = discord.Embed(
                title=f"üçΩÔ∏è Á¢∫Ë™çË≥ºË≤∑Ôºö{item['name']}",
                description=(
                    f"ÂÉπÊ†ºÔºö{price}ÂπΩÈùàÂπ£\n"
                    f"Á®ÖÊî∂Ôºö{tax}%\n"
                    f"ÂêàË®àÔºö{total}ÂπΩÈùàÂπ£\n"
                    f"Ê∂àÈô§Â£ìÂäõÔºö{item['MP']}\n\n"
                    f"ÂπΩÂπΩÂ≠êÔºöÈÄô‰ªΩ‰æõÂìÅÁúãËµ∑‰æÜÂ•ΩÁæéÂë≥‚Ä¶‰Ω†Á¢∫ÂÆöË¶ÅË≤∑‰∏ãÂÆÉÂóéÔºü"
                ),
                color=SHOP_COLOR
            )
            class ConfirmBuy(View):
                def __init__(self):
                    super().__init__(timeout=60)

                @discord.ui.button(label="Á¢∫Ë™çË≥ºË≤∑", style=discord.ButtonStyle.green, emoji="‚úÖ")
                async def confirm(self, button, interaction):
                    # ÈÄôË£°Ë¶ÅÂä†Êâ£Èå¢/Ê™¢Êü•È§òÈ°ç/Êõ¥Êñ∞Ë≥áÊñôÈÇèËºØ
                    await interaction.response.send_message(
                        f"ÂπΩÂπΩÂ≠êÔºöÊÅ≠Âñú‰Ω†Áç≤Âæó‰∫Ü„Äå{item['name']}„ÄçÔºÅË¶ÅÊîæÂÖ•ËÉåÂåÖÈÇÑÊòØÁõ¥Êé•È£üÁî®Âë¢Ôºü",
                        view=UseOrBackpack(item),
                        ephemeral=True
                    )

                @discord.ui.button(label="ÂèñÊ∂à", style=discord.ButtonStyle.red, emoji="‚ùå")
                async def cancel(self, button, interaction):
                    await interaction.response.send_message("ÂπΩÂπΩÂ≠êÔºöÂ•ΩÂêßÔΩû‰æõÂìÅÁïôÁµ¶‰∏ãÊ¨°ÂêßÔºÅ", ephemeral=True)

            await interaction.response.send_message(embed=embed, view=ConfirmBuy(), ephemeral=True)

        # ‰ΩøÁî®ÊñπÂºèÈÅ∏Êìá
        class UseOrBackpack(View):
            def __init__(self, item):
                super().__init__(timeout=60)
                self.item = item

            @discord.ui.button(label="Áõ¥Êé•È£üÁî®", style=discord.ButtonStyle.primary, emoji="üç°")
            async def eat(self, button, interaction):
                # Â¢ûÂä†MP/Ê∂àËÄóÁâ©ÂìÅÈÇèËºØ
                await interaction.response.send_message(f"ÂπΩÂπΩÂ≠êÔºöÂëÄÔΩûÁúüÂ•ΩÂêÉÔºÅ‰Ω†ÁöÑÂ£ìÂäõÊ∂àÈô§‰∫Ü {self.item['MP']} ÈªûÔºÅ", ephemeral=True)

            @discord.ui.button(label="ÊîæÂÖ•ËÉåÂåÖ", style=discord.ButtonStyle.secondary, emoji="üéí")
            async def backpack(self, button, interaction):
                # ÊîæÂÖ•ËÉåÂåÖÈÇèËºØ
                await interaction.response.send_message(f"ÂπΩÂπΩÂ≠êÔºö‰æõÂìÅÂ∑≤ÊîæÂÖ•ËÉåÂåÖÔºåÁ≠â‰∏ãÂÜçÊÖ¢ÊÖ¢‰∫´Áî®ÂêßÔΩû", ephemeral=True)

        await ctx.respond(embed=get_embed(current_page), view=ShopPages(current_page), ephemeral=False)

def setup(bot):
    bot.add_cog(Shop(bot))